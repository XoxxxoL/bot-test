from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext

from db.queries.users import get_user_profile, update_user_balance, update_workers

from keyboards.inline.main_inline import workers_keyboard
from keyboards.inline.main_callback import profile_callback

from misc.states.workers_state import WorkersState
from misc.convert_money import convert_stats
from misc.vriables import SMILE_MONEY_TYPE

async def workers_info(message: types.Message):
    db_session = message.bot.get('db')
    
    user_info = await get_user_profile(db_session, message.from_user.id)
    await message.answer('–¢—ã –ø—Ä–∏—à—ë–ª –≤ –º–µ—Å—Ç–Ω—ã–π –≤—ã—Ç—Ä–µ–∑–≤–∏—Ç–µ–ª—å\n'
                         '–¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–Ω—è—Ç—å –¥—Ä—É–≥–∏—Ö –±–æ–º–∂–µ–π, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–æ—Å–∏–ª–∏ —Ç–µ–±–µ –±—É—Ç—ã–ª–∫–∏, –ø–æ—Å–µ–ª–∏–≤ —É —Å–µ–±—è –≤ –∂–∏–ª—å–µ\n'
                         f'–¶–µ–Ω–∞ –∑–∞ –Ω–∞—ë–º –æ–¥–Ω–æ–≥–æ –±–æ–º–∂–∞: 2.000 —Ä—É–± {SMILE_MONEY_TYPE.get("money")}\n'
                         f'–£ —Ç–µ–±—è {user_info[0].bomj}/{user_info[1].bomj} —á–µ–ª. üë®\n'
                         f'–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {convert_stats(money=user_info[0].money)} {SMILE_MONEY_TYPE.get("money")}'
                         f'| {convert_stats(m=user_info[0].bottle)} {SMILE_MONEY_TYPE.get("bottle")}\n',
                         reply_markup=await workers_keyboard())
    
    
async def add_workers(call: types.CallbackQuery, state: FSMContext):
    db_session = call.message.bot.get('db')

    user_info = await get_user_profile(db_session, call.from_user.id)
    await call.answer()
    await call.message.answer('–ü—Ä–∏—à–ª–∏ –º–Ω–µ, —Å–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç—è–≥ —Ç—ã —Ö–æ—á–µ—â—å –Ω–∞–Ω—è—Ç—å –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã\n'
                              f'–£ —Ç–µ–±—è {user_info[0].bomj}/{user_info[1].bomj} —á–µ–ª.\n'
                              f'–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {convert_stats(money=user_info[0].money)} {SMILE_MONEY_TYPE.get("money")}'
                              f'| {convert_stats(m=user_info[0].bottle)} {SMILE_MONEY_TYPE.get("bottle")}\n')
    await WorkersState.GetCountWorkers.set()
    
    
async def get_count_workers(message: types.Message, state: FSMContext):
    count_workers = message.text
    if count_workers == '0':
        await message.answer('–û—Ç–º–µ–Ω–∞')
        await state.finish()
        return
    if not count_workers.isdigit():
        await message.answer('–ü—Ä–∏—à–ª–∏ –º–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—è–≥ —á–∏—Å–ª–æ–º –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã')
        return
    
    db_session = message.bot.get('db')
    user_info = await get_user_profile(db_session, message.from_user.id)
    count_workers = int(count_workers)
    if count_workers > user_info[1].bomj or user_info[0].bomj + count_workers > user_info[1].bomj:
        await message.answer('–í —Ç–≤–æ—ë–º –∂–∏–ª—å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç –¥–ª—è —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—á–∏—Ö\n'
                             f'–£ —Ç–µ–±—è {user_info[0].bomj}/{user_info[1].bomj} —á–µ–ª.\n'
                             f'–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {convert_stats(money=user_info[0].money)} {SMILE_MONEY_TYPE.get("money")}'
                             f'| {convert_stats(m=user_info[0].bottle)} {SMILE_MONEY_TYPE.get("bottle")}\n'
                             '–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã')
        return
    price_workers = count_workers * 2000
    if price_workers > user_info[0].money:
        await message.answer('–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Ç—Å –¥–ª—è –Ω–∞–π–º–∞ —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—á–∏—Ö\n'
                             f'–£ —Ç–µ–±—è {user_info[0].bomj}/{user_info[1].bomj} —á–µ–ª.\n'
                             f'–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {convert_stats(money=user_info[0].money)} {SMILE_MONEY_TYPE.get("money")}'
                             f'| {convert_stats(m=user_info[0].bottle)} {SMILE_MONEY_TYPE.get("bottle")}\n'
                             '–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã')
        return
    await update_workers(db_session, message.from_user.id, '+', count_workers)
    await update_user_balance(db_session, message.from_user.id, 'money', '-', price_workers)
    await message.answer(f'–¢—ã –Ω–∞–Ω—è–ª {count_workers} —á–µ–ª. –∑–∞ {price_workers} —Ä—É–±. {SMILE_MONEY_TYPE.get("money")}')
    await state.finish()
    


def register_workers_handler(dp: Dispatcher):
    dp.register_message_handler(workers_info, Text(equals='üë® –†–∞–±–æ—Ç–Ω–∏–∫–∏'), chat_type='private')
    dp.register_callback_query_handler(add_workers, profile_callback.filter(event='add_workers'), chat_type='private')
    dp.register_message_handler(get_count_workers, state=WorkersState.GetCountWorkers, chat_type='private')